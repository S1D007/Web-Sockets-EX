name: Build, Test, and Deploy WebSocket App

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: websocket_app_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.14.5'
          otp-version: '25.3'

      - name: Cache deps
        uses: actions/cache@v3
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: _build
          key: ${{ runner.os }}-build-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-build-

      - name: Install dependencies
        run: mix deps.get

      - name: Run tests
        run: mix test

      - name: Check formatting
        run: mix format --check-formatted

      - name: Run Credo
        run: mix credo

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate build timestamp
        run: echo "BUILD_TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_TIMESTAMP }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Kubernetes
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name websocket-cluster --region ${{ secrets.AWS_REGION }}
        
      - name: Generate build timestamp
        run: echo "BUILD_TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

      - name: Replace image tag in Kubernetes manifest
        run: |
          sed -i "s|\${REGISTRY}/websocket-app:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_TIMESTAMP }}|g" k8s/04-websocket-app.yaml
        
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/00-namespace.yaml
          kubectl apply -f k8s/01-configmap.yaml
          kubectl apply -f k8s/03-secrets.yaml
          kubectl apply -f k8s/02-postgres.yaml
          kubectl apply -f k8s/04-websocket-app.yaml
          kubectl apply -f k8s/05-ingress.yaml
          kubectl apply -f k8s/06-hpa.yaml
          kubectl apply -f k8s/07-monitoring.yaml